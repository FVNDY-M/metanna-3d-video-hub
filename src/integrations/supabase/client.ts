
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zdfwczmxucakglnyedrh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpkZndjem14dWNha2dsbnllZHJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4OTI0MTAsImV4cCI6MjA1NzQ2ODQxMH0.95qxGNi8DGT_-IDmBGbWkr5cIzr_sD-Wx7klBej8pOQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to increment video views
// Only called when:
// 1. User watches at least 50% of the video, or
// 2. User skips to at least the 50% mark
export const incrementVideoView = async (videoId: string, userId?: string) => {
  if (!videoId) return;

  // Update video views count using RPC function
  const { error } = await supabase.rpc('increment_count', { row_id: videoId });

  if (error) {
    console.error('Error incrementing view count:', error);
    return;
  }

  // If user is authenticated, add to watch history
  if (userId) {
    const { error: historyError } = await supabase
      .from('watch_history')
      .upsert(
        { 
          user_id: userId, 
          video_id: videoId,
          watched_at: new Date().toISOString()
        },
        { onConflict: 'user_id,video_id' }
      );

    if (historyError) {
      console.error('Error adding to watch history:', historyError);
    }
  }
};

/**
 * Toggle the pinned status of a comment in the database
 * @param commentId The ID of the comment to toggle
 * @param videoId The ID of the video the comment belongs to
 * @param currentStatus The current is_pinned status of the comment
 * @returns An object containing success status and updated comment data if successful
 */
export const toggleCommentPinStatus = async (
  commentId: string, 
  videoId: string, 
  currentStatus: boolean
): Promise<{ success: boolean; data?: any; error?: any }> => {
  try {
    // If we're pinning a comment (current status is false), unpin all other comments first
    if (!currentStatus) {
      // First unpin all comments for this video
      const { error: unpinError } = await supabase
        .from('comments')
        .update({ is_pinned: false })
        .eq('video_id', videoId)
        .eq('is_pinned', true);
        
      if (unpinError) {
        console.error('Error unpinning other comments:', unpinError);
        return { success: false, error: unpinError };
      }
    }
    
    // Now toggle the status of the target comment
    const { data, error } = await supabase
      .from('comments')
      .update({ is_pinned: !currentStatus })
      .eq('id', commentId)
      .select('*')
      .single();
      
    if (error) {
      console.error('Error toggling comment pin status:', error);
      return { success: false, error };
    }
    
    return { success: true, data };
  } catch (error) {
    console.error('Unexpected error in toggleCommentPinStatus:', error);
    return { success: false, error };
  }
};

/**
 * Delete a video and all its related data
 * @param videoId The ID of the video to delete
 * @returns An object containing success status and error if any
 */
export const deleteVideo = async (videoId: string): Promise<{ success: boolean; error?: any }> => {
  try {
    // Get all video analytics related to this video first, to check if there are any
    const { data: videoAnalyticsData, error: fetchError } = await supabase
      .from('video_analytics')
      .select('id')
      .eq('video_id', videoId);
      
    if (fetchError) {
      console.error('Error fetching video analytics:', fetchError);
      return { success: false, error: fetchError };
    }
    
    // If there are video analytics records, delete them first
    if (videoAnalyticsData && videoAnalyticsData.length > 0) {
      const { error: analyticsError } = await supabase
        .from('video_analytics')
        .delete()
        .eq('video_id', videoId);
        
      if (analyticsError) {
        console.error('Error deleting video analytics:', analyticsError);
        return { success: false, error: analyticsError };
      }
      
      console.log(`Deleted ${videoAnalyticsData.length} video analytics records`);
    }
    
    // Now delete the rest of the related data
    
    // 1. Delete watch history
    const { error: watchHistoryError } = await supabase
      .from('watch_history')
      .delete()
      .eq('video_id', videoId);
      
    if (watchHistoryError) {
      console.error('Error deleting watch history:', watchHistoryError);
      return { success: false, error: watchHistoryError };
    }
    
    // 2. Delete likes
    const { error: likesError } = await supabase
      .from('likes')
      .delete()
      .eq('video_id', videoId);
      
    if (likesError) {
      console.error('Error deleting likes:', likesError);
      return { success: false, error: likesError };
    }
    
    // 3. Delete comments
    const { error: commentsError } = await supabase
      .from('comments')
      .delete()
      .eq('video_id', videoId);
      
    if (commentsError) {
      console.error('Error deleting comments:', commentsError);
      return { success: false, error: commentsError };
    }
    
    // 4. Finally, delete the video itself
    const { error: videoError } = await supabase
      .from('videos')
      .delete()
      .eq('id', videoId);
      
    if (videoError) {
      console.error('Error deleting video:', videoError);
      return { success: false, error: videoError };
    }
    
    console.log('Video and all related data successfully deleted');
    return { success: true };
  } catch (error) {
    console.error('Unexpected error in deleteVideo:', error);
    return { success: false, error };
  }
};

/**
 * Delete a user and all their related data
 * @param userId The ID of the user to delete
 * @returns An object containing success status and error if any
 */
export const deleteUser = async (userId: string): Promise<{ success: boolean; error?: any }> => {
  try {
    console.log(`Starting deletion process for user ${userId}`);
    
    // 1. Delete user's videos (this will cascade to delete related likes, comments, watch history)
    const { data: userVideos, error: videosError } = await supabase
      .from('videos')
      .select('id')
      .eq('user_id', userId);
      
    if (videosError) {
      console.error('Error fetching user videos:', videosError);
      return { success: false, error: videosError };
    }
    
    // Delete each video
    if (userVideos && userVideos.length > 0) {
      console.log(`Found ${userVideos.length} videos to delete`);
      
      for (const video of userVideos) {
        const { success, error } = await deleteVideo(video.id);
        
        if (!success) {
          console.error(`Error deleting video ${video.id}:`, error);
          return { success: false, error };
        }
      }
    }
    
    // 2. Delete user's likes
    const { error: likesError } = await supabase
      .from('likes')
      .delete()
      .eq('user_id', userId);
      
    if (likesError) {
      console.error('Error deleting user likes:', likesError);
      return { success: false, error: likesError };
    }
    
    // 3. Delete user's comments
    const { error: commentsError } = await supabase
      .from('comments')
      .delete()
      .eq('user_id', userId);
      
    if (commentsError) {
      console.error('Error deleting user comments:', commentsError);
      return { success: false, error: commentsError };
    }
    
    // 4. Delete user's watch history
    const { error: watchHistoryError } = await supabase
      .from('watch_history')
      .delete()
      .eq('user_id', userId);
      
    if (watchHistoryError) {
      console.error('Error deleting user watch history:', watchHistoryError);
      return { success: false, error: watchHistoryError };
    }
    
    // 5. Delete user's subscriptions (both as subscriber and creator)
    const { error: subscriberError } = await supabase
      .from('subscriptions')
      .delete()
      .eq('subscriber_id', userId);
      
    if (subscriberError) {
      console.error('Error deleting user subscriptions as subscriber:', subscriberError);
      return { success: false, error: subscriberError };
    }
    
    const { error: creatorError } = await supabase
      .from('subscriptions')
      .delete()
      .eq('creator_id', userId);
      
    if (creatorError) {
      console.error('Error deleting user subscriptions as creator:', creatorError);
      return { success: false, error: creatorError };
    }
    
    // 6. Delete user profile
    const { error: profileError } = await supabase
      .from('profiles')
      .delete()
      .eq('id', userId);
      
    if (profileError) {
      console.error('Error deleting user profile:', profileError);
      return { success: false, error: profileError };
    }
    
    // 7. Delete the auth user (this should be last as it may revoke tokens)
    const { error: authError } = await supabase.auth.admin.deleteUser(userId);
    
    if (authError) {
      console.error('Error deleting auth user:', authError);
      return { success: false, error: authError };
    }
    
    console.log(`Successfully deleted user ${userId} and all associated data`);
    return { success: true };
  } catch (error) {
    console.error('Unexpected error in deleteUser:', error);
    return { success: false, error };
  }
};

/**
 * Check and lift expired suspensions
 * This function can be called on app initialization or after a user login
 */
export const checkExpiredSuspensions = async (): Promise<void> => {
  try {
    const now = new Date().toISOString();
    
    // Check and lift user suspensions
    const { error: userError } = await supabase
      .from('profiles')
      .update({ is_suspended: false, suspension_end_date: null })
      .lt('suspension_end_date', now)
      .eq('is_suspended', true);
      
    if (userError) {
      console.error('Error lifting expired user suspensions:', userError);
    } else {
      console.log('Successfully lifted expired user suspensions');
    }
    
    // Check and lift video suspensions
    const { error: videoError } = await supabase
      .from('videos')
      .update({ is_suspended: false, suspension_end_date: null })
      .lt('suspension_end_date', now)
      .eq('is_suspended', true);
      
    if (videoError) {
      console.error('Error lifting expired video suspensions:', videoError);
    } else {
      console.log('Successfully lifted expired video suspensions');
    }
  } catch (error) {
    console.error('Unexpected error in checkExpiredSuspensions:', error);
  }
};
