
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zdfwczmxucakglnyedrh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpkZndjem14dWNha2dsbnllZHJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4OTI0MTAsImV4cCI6MjA1NzQ2ODQxMH0.95qxGNi8DGT_-IDmBGbWkr5cIzr_sD-Wx7klBej8pOQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to increment video views
// Only called when:
// 1. User watches at least 50% of the video, or
// 2. User skips to at least the 50% mark
export const incrementVideoView = async (videoId: string, userId?: string) => {
  if (!videoId) return;

  // Update video views count using RPC function
  const { error } = await supabase.rpc('increment_count', { row_id: videoId });

  if (error) {
    console.error('Error incrementing view count:', error);
    return;
  }

  // If user is authenticated, add to watch history
  if (userId) {
    const { error: historyError } = await supabase
      .from('watch_history')
      .upsert(
        { 
          user_id: userId, 
          video_id: videoId,
          watched_at: new Date().toISOString()
        },
        { onConflict: 'user_id,video_id' }
      );

    if (historyError) {
      console.error('Error adding to watch history:', historyError);
    }
  }
};

/**
 * Toggle the pinned status of a comment in the database
 * @param commentId The ID of the comment to toggle
 * @param videoId The ID of the video the comment belongs to
 * @param currentStatus The current is_pinned status of the comment
 * @returns An object containing success status and updated comment data if successful
 */
export const toggleCommentPinStatus = async (
  commentId: string, 
  videoId: string, 
  currentStatus: boolean
): Promise<{ success: boolean; data?: any; error?: any }> => {
  try {
    // If we're pinning a comment (current status is false), unpin all other comments first
    if (!currentStatus) {
      // First unpin all comments for this video
      const { error: unpinError } = await supabase
        .from('comments')
        .update({ is_pinned: false })
        .eq('video_id', videoId)
        .eq('is_pinned', true);
        
      if (unpinError) {
        console.error('Error unpinning other comments:', unpinError);
        return { success: false, error: unpinError };
      }
    }
    
    // Now toggle the status of the target comment
    const { data, error } = await supabase
      .from('comments')
      .update({ is_pinned: !currentStatus })
      .eq('id', commentId)
      .select('*')
      .single();
      
    if (error) {
      console.error('Error toggling comment pin status:', error);
      return { success: false, error };
    }
    
    return { success: true, data };
  } catch (error) {
    console.error('Unexpected error in toggleCommentPinStatus:', error);
    return { success: false, error };
  }
};

