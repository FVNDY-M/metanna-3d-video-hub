
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zdfwczmxucakglnyedrh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpkZndjem14dWNha2dsbnllZHJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4OTI0MTAsImV4cCI6MjA1NzQ2ODQxMH0.95qxGNi8DGT_-IDmBGbWkr5cIzr_sD-Wx7klBej8pOQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to increment video views
// Only called when:
// 1. User watches at least 50% of the video, or
// 2. User skips to at least the 50% mark
export const incrementVideoView = async (videoId: string, userId?: string) => {
  if (!videoId) return;

  // Update video views count using RPC function
  const { error } = await supabase.rpc('increment_count', { row_id: videoId });

  if (error) {
    console.error('Error incrementing view count:', error);
    return;
  }

  // If user is authenticated, add to watch history
  if (userId) {
    const { error: historyError } = await supabase
      .from('watch_history')
      .upsert(
        { 
          user_id: userId, 
          video_id: videoId,
          watched_at: new Date().toISOString()
        },
        { onConflict: 'user_id,video_id' }
      );

    if (historyError) {
      console.error('Error adding to watch history:', historyError);
    }
  }
};

/**
 * Toggle the pinned status of a comment in the database
 * @param commentId The ID of the comment to toggle
 * @param videoId The ID of the video the comment belongs to
 * @param currentStatus The current is_pinned status of the comment
 * @returns An object containing success status and updated comment data if successful
 */
export const toggleCommentPinStatus = async (
  commentId: string, 
  videoId: string, 
  currentStatus: boolean
): Promise<{ success: boolean; data?: any; error?: any }> => {
  try {
    // If we're pinning a comment (current status is false), unpin all other comments first
    if (!currentStatus) {
      // First unpin all comments for this video
      const { error: unpinError } = await supabase
        .from('comments')
        .update({ is_pinned: false })
        .eq('video_id', videoId)
        .eq('is_pinned', true);
        
      if (unpinError) {
        console.error('Error unpinning other comments:', unpinError);
        return { success: false, error: unpinError };
      }
    }
    
    // Now toggle the status of the target comment
    const { data, error } = await supabase
      .from('comments')
      .update({ is_pinned: !currentStatus })
      .eq('id', commentId)
      .select('*')
      .single();
      
    if (error) {
      console.error('Error toggling comment pin status:', error);
      return { success: false, error };
    }
    
    return { success: true, data };
  } catch (error) {
    console.error('Unexpected error in toggleCommentPinStatus:', error);
    return { success: false, error };
  }
};

/**
 * Delete a video and all its related data
 * @param videoId The ID of the video to delete
 * @returns An object containing success status and error if any
 */
export const deleteVideo = async (videoId: string): Promise<{ success: boolean; error?: any }> => {
  try {
    // First, fetch the video to get the file URLs
    const { data: videoData, error: fetchVideoError } = await supabase
      .from('videos')
      .select('thumbnail_url, video_url')
      .eq('id', videoId)
      .single();
      
    if (fetchVideoError) {
      console.error('Error fetching video data for deletion:', fetchVideoError);
      return { success: false, error: fetchVideoError };
    }
    
    // Get all video analytics related to this video first, to check if there are any
    const { data: videoAnalyticsData, error: fetchError } = await supabase
      .from('video_analytics')
      .select('id')
      .eq('video_id', videoId);
      
    if (fetchError) {
      console.error('Error fetching video analytics:', fetchError);
      return { success: false, error: fetchError };
    }
    
    // If there are video analytics records, delete them first
    if (videoAnalyticsData && videoAnalyticsData.length > 0) {
      const { error: analyticsError } = await supabase
        .from('video_analytics')
        .delete()
        .eq('video_id', videoId);
        
      if (analyticsError) {
        console.error('Error deleting video analytics:', analyticsError);
        return { success: false, error: analyticsError };
      }
      
      console.log(`Deleted ${videoAnalyticsData.length} video analytics records`);
    }
    
    // Now delete the rest of the related data
    
    // 1. Delete watch history
    const { error: watchHistoryError } = await supabase
      .from('watch_history')
      .delete()
      .eq('video_id', videoId);
      
    if (watchHistoryError) {
      console.error('Error deleting watch history:', watchHistoryError);
      return { success: false, error: watchHistoryError };
    }
    
    // 2. Delete likes
    const { error: likesError } = await supabase
      .from('likes')
      .delete()
      .eq('video_id', videoId);
      
    if (likesError) {
      console.error('Error deleting likes:', likesError);
      return { success: false, error: likesError };
    }
    
    // 3. Delete comments
    const { error: commentsError } = await supabase
      .from('comments')
      .delete()
      .eq('video_id', videoId);
      
    if (commentsError) {
      console.error('Error deleting comments:', commentsError);
      return { success: false, error: commentsError };
    }
    
    // 4. Delete the video itself from the database
    const { error: videoError } = await supabase
      .from('videos')
      .delete()
      .eq('id', videoId);
      
    if (videoError) {
      console.error('Error deleting video record:', videoError);
      return { success: false, error: videoError };
    }
    
    // 5. Delete the files from storage
    // Extract filenames from URLs
    if (videoData) {
      // Delete thumbnail from storage if it exists
      if (videoData.thumbnail_url) {
        // Extract filename from thumbnail URL
        const thumbnailPath = extractFilenameFromUrl(videoData.thumbnail_url);
        if (thumbnailPath) {
          const { error: thumbnailDeleteError } = await supabase.storage
            .from('thumbnails')
            .remove([thumbnailPath]);
            
          if (thumbnailDeleteError) {
            console.error('Error deleting thumbnail file:', thumbnailDeleteError);
            // Continue with the process even if thumbnail deletion fails
          } else {
            console.log('Thumbnail file successfully deleted from storage');
          }
        }
      }
      
      // Delete video file from storage if it exists
      if (videoData.video_url) {
        // Extract filename from video URL
        const videoPath = extractFilenameFromUrl(videoData.video_url);
        if (videoPath) {
          const { error: videoFileDeleteError } = await supabase.storage
            .from('videos')
            .remove([videoPath]);
            
          if (videoFileDeleteError) {
            console.error('Error deleting video file:', videoFileDeleteError);
            // Continue with the process even if video file deletion fails
          } else {
            console.log('Video file successfully deleted from storage');
          }
        }
      }
    }
    
    console.log('Video and all related data successfully deleted');
    return { success: true };
  } catch (error) {
    console.error('Unexpected error in deleteVideo:', error);
    return { success: false, error };
  }
};

/**
 * Helper function to extract filename from a Supabase storage URL
 * @param url The full Supabase URL of the file
 * @returns The filename/path within the storage bucket, or null if not parsable
 */
const extractFilenameFromUrl = (url: string): string | null => {
  try {
    if (!url) return null;
    
    // Get the last part of the URL after the last '/'
    const parts = url.split('/');
    const lastPart = parts[parts.length - 1];
    
    // Handle URL encoded characters
    return decodeURIComponent(lastPart);
  } catch (error) {
    console.error('Error extracting filename from URL:', error);
    return null;
  }
};

/**
 * Delete a user's avatar from storage and update profile
 * @param userId The ID of the user
 * @param avatarUrl The current avatar URL to delete
 * @returns An object containing success status and error if any
 */
export const deleteUserAvatar = async (userId: string, avatarUrl: string): Promise<{ success: boolean; error?: any }> => {
  try {
    if (!userId || !avatarUrl) {
      return { success: false, error: "Missing user ID or avatar URL" };
    }
    
    // Extract the filename from the avatar URL
    const avatarPath = extractFilenameFromUrl(avatarUrl);
    
    if (!avatarPath) {
      return { success: false, error: "Could not extract avatar filename" };
    }
    
    // Delete the avatar file from storage
    const { error: deleteError } = await supabase.storage
      .from('avatars')
      .remove([`${userId}/${avatarPath}`]);
      
    if (deleteError) {
      console.error('Error deleting avatar file:', deleteError);
      return { success: false, error: deleteError };
    }
    
    // Update the user profile to remove the avatar reference
    const { error: updateError } = await supabase
      .from('profiles')
      .update({ avatar_url: null })
      .eq('id', userId);
      
    if (updateError) {
      console.error('Error updating profile after avatar deletion:', updateError);
      return { success: false, error: updateError };
    }
    
    return { success: true };
  } catch (error) {
    console.error('Unexpected error in deleteUserAvatar:', error);
    return { success: false, error };
  }
};

